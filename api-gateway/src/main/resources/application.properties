spring.application.name=api-gateway

# config eureka client
# register like eureka client. In this case make this work since properties, but we can do the same by annotation in main class
spring.cloud.gateway.discovery.locator.enabled=true
eureka.instance.instance-id=${spring.application.name}:${random.uuid}

# disables the default load balancing strategy because we can use spring load balancing
spring.cloud.load.balancer.ribbon=false

# api gateway config
spring.cloud.gateway.routes[0].id=product-microservice
spring.cloud.gateway.routes[0].uri=lb://PRODUCT-MICROSERVICE
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/products/**, /api/categories/**

spring.cloud.gateway.routes[1].id=booking-microservice
spring.cloud.gateway.routes[1].uri=lb://BOOKING-MICROSERVICE
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/booking/**

# config the auth
spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:9090/realms/bookingchain-realm
spring.security.oauth2.client.registration.spring-cloud-gateway-client.client-id=spring-cloud-gateway-client
spring.security.oauth2.client.registration.spring-cloud-gateway-client.client-secret=9OE8qe7aS5TIw58l2hIqJsaKKZzey71S
spring.security.oauth2.client.registration.spring-cloud-gateway-client.provider=keycloak
spring.security.oauth2.client.registration.spring-cloud-gateway-client.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.spring-cloud-gateway-client.redirect-uri=http://localhost:8080/login/oauth2/code/spring-cloud-gateway-client